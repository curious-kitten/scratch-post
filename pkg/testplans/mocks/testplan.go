// Code generated by MockGen. DO NOT EDIT.
// Source: ./testplan.go

// Package mock_testplans is a generated GoMock package.
package mock_testplans

import (
	context "context"
	reflect "reflect"

	metadata "github.com/curious-kitten/scratch-post/pkg/api/v1/metadata"
	gomock "github.com/golang/mock/gomock"
)

// MockMetaHandler is a mock of MetaHandler interface
type MockMetaHandler struct {
	ctrl     *gomock.Controller
	recorder *MockMetaHandlerMockRecorder
}

// MockMetaHandlerMockRecorder is the mock recorder for MockMetaHandler
type MockMetaHandlerMockRecorder struct {
	mock *MockMetaHandler
}

// NewMockMetaHandler creates a new mock instance
func NewMockMetaHandler(ctrl *gomock.Controller) *MockMetaHandler {
	mock := &MockMetaHandler{ctrl: ctrl}
	mock.recorder = &MockMetaHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetaHandler) EXPECT() *MockMetaHandlerMockRecorder {
	return m.recorder
}

// NewMeta mocks base method
func (m *MockMetaHandler) NewMeta(author, objType string) (*metadata.Identity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewMeta", author, objType)
	ret0, _ := ret[0].(*metadata.Identity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewMeta indicates an expected call of NewMeta
func (mr *MockMetaHandlerMockRecorder) NewMeta(author, objType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewMeta", reflect.TypeOf((*MockMetaHandler)(nil).NewMeta), author, objType)
}

// UpdateMeta mocks base method
func (m *MockMetaHandler) UpdateMeta(author string, identity *metadata.Identity) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateMeta", author, identity)
}

// UpdateMeta indicates an expected call of UpdateMeta
func (mr *MockMetaHandlerMockRecorder) UpdateMeta(author, identity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeta", reflect.TypeOf((*MockMetaHandler)(nil).UpdateMeta), author, identity)
}

// MockAdder is a mock of Adder interface
type MockAdder struct {
	ctrl     *gomock.Controller
	recorder *MockAdderMockRecorder
}

// MockAdderMockRecorder is the mock recorder for MockAdder
type MockAdderMockRecorder struct {
	mock *MockAdder
}

// NewMockAdder creates a new mock instance
func NewMockAdder(ctrl *gomock.Controller) *MockAdder {
	mock := &MockAdder{ctrl: ctrl}
	mock.recorder = &MockAdderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAdder) EXPECT() *MockAdderMockRecorder {
	return m.recorder
}

// AddOne mocks base method
func (m *MockAdder) AddOne(ctx context.Context, item interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOne", ctx, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOne indicates an expected call of AddOne
func (mr *MockAdderMockRecorder) AddOne(ctx, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOne", reflect.TypeOf((*MockAdder)(nil).AddOne), ctx, item)
}

// MockGetter is a mock of Getter interface
type MockGetter struct {
	ctrl     *gomock.Controller
	recorder *MockGetterMockRecorder
}

// MockGetterMockRecorder is the mock recorder for MockGetter
type MockGetterMockRecorder struct {
	mock *MockGetter
}

// NewMockGetter creates a new mock instance
func NewMockGetter(ctrl *gomock.Controller) *MockGetter {
	mock := &MockGetter{ctrl: ctrl}
	mock.recorder = &MockGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGetter) EXPECT() *MockGetterMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockGetter) Get(ctx context.Context, id string, item interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockGetterMockRecorder) Get(ctx, id, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGetter)(nil).Get), ctx, id, item)
}

// GetAll mocks base method
func (m *MockGetter) GetAll(ctx context.Context, items interface{}, filterMap map[string][]string, sortBy string, reverse bool, count int, previousLastValue string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, items, filterMap, sortBy, reverse, count, previousLastValue)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAll indicates an expected call of GetAll
func (mr *MockGetterMockRecorder) GetAll(ctx, items, filterMap, sortBy, reverse, count, previousLastValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockGetter)(nil).GetAll), ctx, items, filterMap, sortBy, reverse, count, previousLastValue)
}

// MockDeleter is a mock of Deleter interface
type MockDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockDeleterMockRecorder
}

// MockDeleterMockRecorder is the mock recorder for MockDeleter
type MockDeleterMockRecorder struct {
	mock *MockDeleter
}

// NewMockDeleter creates a new mock instance
func NewMockDeleter(ctrl *gomock.Controller) *MockDeleter {
	mock := &MockDeleter{ctrl: ctrl}
	mock.recorder = &MockDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDeleter) EXPECT() *MockDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockDeleter) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockDeleterMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDeleter)(nil).Delete), ctx, id)
}

// MockUpdater is a mock of Updater interface
type MockUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockUpdaterMockRecorder
}

// MockUpdaterMockRecorder is the mock recorder for MockUpdater
type MockUpdaterMockRecorder struct {
	mock *MockUpdater
}

// NewMockUpdater creates a new mock instance
func NewMockUpdater(ctrl *gomock.Controller) *MockUpdater {
	mock := &MockUpdater{ctrl: ctrl}
	mock.recorder = &MockUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUpdater) EXPECT() *MockUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method
func (m *MockUpdater) Update(ctx context.Context, id string, item interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockUpdaterMockRecorder) Update(ctx, id, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUpdater)(nil).Update), ctx, id, item)
}

// MockReaderUpdater is a mock of ReaderUpdater interface
type MockReaderUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockReaderUpdaterMockRecorder
}

// MockReaderUpdaterMockRecorder is the mock recorder for MockReaderUpdater
type MockReaderUpdaterMockRecorder struct {
	mock *MockReaderUpdater
}

// NewMockReaderUpdater creates a new mock instance
func NewMockReaderUpdater(ctrl *gomock.Controller) *MockReaderUpdater {
	mock := &MockReaderUpdater{ctrl: ctrl}
	mock.recorder = &MockReaderUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReaderUpdater) EXPECT() *MockReaderUpdaterMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockReaderUpdater) Get(ctx context.Context, id string, item interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockReaderUpdaterMockRecorder) Get(ctx, id, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockReaderUpdater)(nil).Get), ctx, id, item)
}

// GetAll mocks base method
func (m *MockReaderUpdater) GetAll(ctx context.Context, items interface{}, filterMap map[string][]string, sortBy string, reverse bool, count int, previousLastValue string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, items, filterMap, sortBy, reverse, count, previousLastValue)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAll indicates an expected call of GetAll
func (mr *MockReaderUpdaterMockRecorder) GetAll(ctx, items, filterMap, sortBy, reverse, count, previousLastValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockReaderUpdater)(nil).GetAll), ctx, items, filterMap, sortBy, reverse, count, previousLastValue)
}

// Update mocks base method
func (m *MockReaderUpdater) Update(ctx context.Context, id string, item interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockReaderUpdaterMockRecorder) Update(ctx, id, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockReaderUpdater)(nil).Update), ctx, id, item)
}
